//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Animations/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""f4dc49ef-e8dd-46b8-8d90-2caf113d0445"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""655a5af0-e96a-404a-b888-b5c8531b5951"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""c68dabec-754f-41c7-bafc-284cf6c2e246"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause Active"",
                    ""type"": ""Button"",
                    ""id"": ""c2415ffb-35d9-46de-ac9b-4fea72b4bbaa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause Disable"",
                    ""type"": ""Button"",
                    ""id"": ""c53600a7-aa16-4ea0-a7c7-cf8c6add315d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Move X"",
                    ""type"": ""Button"",
                    ""id"": ""e84d2dcd-d5e6-4094-a80f-bebd505358bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Move Y"",
                    ""type"": ""Button"",
                    ""id"": ""ac3b86d2-0dce-4717-b140-219ba2a68257"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""6033940c-33df-44f0-b3d0-f37827a9d6eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""b29bcce7-a1ba-4243-94de-04320ce776d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30bc8d92-6a26-4223-9f73-cc965764e32b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7a302a5-b7c2-4df6-ae4f-39b4639411e3"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd124b75-c0c4-4a09-a73a-22f3d18efd36"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause Active"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""973f796f-e23d-4b2a-a619-115fb625febb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Move X"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0f7fe57e-10fe-4616-a5c9-f0cf43c6e473"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Right Move X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""46a6e1a3-f890-44c3-a43d-9db2c3ab5b49"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Right Move X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""14d77dfd-2896-4eeb-b9c6-fd71888c2f16"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Move Y"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f467c79b-0c71-4ed2-a372-1a2c0f2ad5f5"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Right Move Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0fabbdf2-e353-4d22-b4af-b386cf20a1cb"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Right Move Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c26b3410-7587-4858-9425-854efc3522c2"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Previous Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1feabc1-99ad-47c0-8cb4-323bb96fdf39"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Next Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38a45d4f-0bf4-425f-b8af-6a184ca8146b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause Disable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Shoot = m_Main.FindAction("Shoot", throwIfNotFound: true);
        m_Main_Reload = m_Main.FindAction("Reload", throwIfNotFound: true);
        m_Main_PauseActive = m_Main.FindAction("Pause Active", throwIfNotFound: true);
        m_Main_PauseDisable = m_Main.FindAction("Pause Disable", throwIfNotFound: true);
        m_Main_RightMoveX = m_Main.FindAction("Right Move X", throwIfNotFound: true);
        m_Main_RightMoveY = m_Main.FindAction("Right Move Y", throwIfNotFound: true);
        m_Main_PreviousWeapon = m_Main.FindAction("Previous Weapon", throwIfNotFound: true);
        m_Main_NextWeapon = m_Main.FindAction("Next Weapon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
    private readonly InputAction m_Main_Shoot;
    private readonly InputAction m_Main_Reload;
    private readonly InputAction m_Main_PauseActive;
    private readonly InputAction m_Main_PauseDisable;
    private readonly InputAction m_Main_RightMoveX;
    private readonly InputAction m_Main_RightMoveY;
    private readonly InputAction m_Main_PreviousWeapon;
    private readonly InputAction m_Main_NextWeapon;
    public struct MainActions
    {
        private @Controls m_Wrapper;
        public MainActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Main_Shoot;
        public InputAction @Reload => m_Wrapper.m_Main_Reload;
        public InputAction @PauseActive => m_Wrapper.m_Main_PauseActive;
        public InputAction @PauseDisable => m_Wrapper.m_Main_PauseDisable;
        public InputAction @RightMoveX => m_Wrapper.m_Main_RightMoveX;
        public InputAction @RightMoveY => m_Wrapper.m_Main_RightMoveY;
        public InputAction @PreviousWeapon => m_Wrapper.m_Main_PreviousWeapon;
        public InputAction @NextWeapon => m_Wrapper.m_Main_NextWeapon;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void AddCallbacks(IMainActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @PauseActive.started += instance.OnPauseActive;
            @PauseActive.performed += instance.OnPauseActive;
            @PauseActive.canceled += instance.OnPauseActive;
            @PauseDisable.started += instance.OnPauseDisable;
            @PauseDisable.performed += instance.OnPauseDisable;
            @PauseDisable.canceled += instance.OnPauseDisable;
            @RightMoveX.started += instance.OnRightMoveX;
            @RightMoveX.performed += instance.OnRightMoveX;
            @RightMoveX.canceled += instance.OnRightMoveX;
            @RightMoveY.started += instance.OnRightMoveY;
            @RightMoveY.performed += instance.OnRightMoveY;
            @RightMoveY.canceled += instance.OnRightMoveY;
            @PreviousWeapon.started += instance.OnPreviousWeapon;
            @PreviousWeapon.performed += instance.OnPreviousWeapon;
            @PreviousWeapon.canceled += instance.OnPreviousWeapon;
            @NextWeapon.started += instance.OnNextWeapon;
            @NextWeapon.performed += instance.OnNextWeapon;
            @NextWeapon.canceled += instance.OnNextWeapon;
        }

        private void UnregisterCallbacks(IMainActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @PauseActive.started -= instance.OnPauseActive;
            @PauseActive.performed -= instance.OnPauseActive;
            @PauseActive.canceled -= instance.OnPauseActive;
            @PauseDisable.started -= instance.OnPauseDisable;
            @PauseDisable.performed -= instance.OnPauseDisable;
            @PauseDisable.canceled -= instance.OnPauseDisable;
            @RightMoveX.started -= instance.OnRightMoveX;
            @RightMoveX.performed -= instance.OnRightMoveX;
            @RightMoveX.canceled -= instance.OnRightMoveX;
            @RightMoveY.started -= instance.OnRightMoveY;
            @RightMoveY.performed -= instance.OnRightMoveY;
            @RightMoveY.canceled -= instance.OnRightMoveY;
            @PreviousWeapon.started -= instance.OnPreviousWeapon;
            @PreviousWeapon.performed -= instance.OnPreviousWeapon;
            @PreviousWeapon.canceled -= instance.OnPreviousWeapon;
            @NextWeapon.started -= instance.OnNextWeapon;
            @NextWeapon.performed -= instance.OnNextWeapon;
            @NextWeapon.canceled -= instance.OnNextWeapon;
        }

        public void RemoveCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainActions @Main => new MainActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IMainActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnPauseActive(InputAction.CallbackContext context);
        void OnPauseDisable(InputAction.CallbackContext context);
        void OnRightMoveX(InputAction.CallbackContext context);
        void OnRightMoveY(InputAction.CallbackContext context);
        void OnPreviousWeapon(InputAction.CallbackContext context);
        void OnNextWeapon(InputAction.CallbackContext context);
    }
}
